service: profile-retrieval
custom:
  profileRetrievalStage: ${opt:stage, self:provider.stage}
  profileRetrievalEnvironment:
    CIS_ENVIRONMENT:
      production: production
      development: development
      testing: testing
    DYNAMODB_TABLE:
      production: production-identity-vault
      development: development-identity-vault
      testing: testing-identity-vault
    IDENTIFIER:
      production: api.sso.mozilla.com
      development: api.dev.sso.allizom.org
      testing: api.test.sso.allizom.org
    CIS_DYNAMODB_ARN:
      production: arn:aws:dynamodb:us-west-2:320464205386:table/production-identity-vault
      development: arn:aws:dynamodb:us-west-2:320464205386:table/development-identity-vault
      testing: arn:aws:dynamodb:us-west-2:320464205386:table/testing-identity-vault
    PERSON_API_AUTH0_DOMAIN:
      production: auth.mozilla.auth0.com
      development: auth.mozilla.auth0.com
      testing: auth.mozilla.auth0.com
    CIS_JWT_VALIDATION:
      production: true
      development: true
      testing: true
    DOMAIN_NAME:
      production: person.api.sso.mozilla.com
      development: person.api.dev.sso.allizom.org
      testing: person.api.test.sso.allizom.org
    CIS_DISCOVERY_URL:
      production: https://auth.mozilla.com/.well-known/mozilla-iam
      development: https://auth.allizom.org/.well-known/mozilla-iam
      testing: https://auth.mozilla.com/.well-known/mozilla-iam
provider:
  name: aws
  runtime: python3.9
  architecture: x86_64
  tracing:
    lambda: true
    apiGateway: true
  logs:
    restApi:
      level: ERROR
      accessLogging: false
      executionLogging: true
      fullExecutionData: false
  apiGateway:
    # 3 minutes (in milliseconds). Though, as we found out, anything above 30
    # seconds will get cut off by an internal timeout from the API Gateway.
    # This value is to preserve some manual changes we've had to make along the
    # way.
    timeoutInMillis: 180000
  environment:
    CIS_DYNAMODB_ARN: ${self:custom.profileRetrievalEnvironment.CIS_DYNAMODB_ARN.${self:custom.profileRetrievalStage}}
    CIS_ENVIRONMENT: ${self:custom.profileRetrievalEnvironment.CIS_ENVIRONMENT.${self:custom.profileRetrievalStage}}
    CIS_ASSUME_ROLE_ARN: None
    CIS_REQUESTS_CACHE_BACKEND: memory
    PERSON_API_AUTH0_DOMAIN: ${self:custom.profileRetrievalEnvironment.PERSON_API_AUTH0_DOMAIN.${self:custom.profileRetrievalStage}}
    PERSON_API_API_IDENTIFIER: ${self:custom.profileRetrievalEnvironment.IDENTIFIER.${self:custom.profileRetrievalStage}}
    CIS_DISCOVERY_URL: ${self:custom.profileRetrievalEnvironment.CIS_DISCOVERY_URL.${self:custom.profileRetrievalStage}}
    PERSON_API_ADVANCED_SEARCH: true
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
      Resource:
        - ${self:custom.profileRetrievalEnvironment.CIS_DYNAMODB_ARN.${self:custom.profileRetrievalStage}}/*
        - ${self:custom.profileRetrievalEnvironment.CIS_DYNAMODB_ARN.${self:custom.profileRetrievalStage}}
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
functions:
  api:
    handler: handler.handle
    description: serverless-wsgi based endpoint to retrieve profiles aka person-api.
    memorySize: 3000
    # 3 minutes (in seconds). Though, as we found out, anything above 30
    # seconds will get cut off by an internal timeout from the API Gateway.
    # This value is to preserve some manual changes we've had to make along the
    # way.
    timeout: 180
    logRetentionInDays: 30
    events:
      - http: ANY /
      - http: ANY {proxy+}
    layers:
      - ${ssm:/iam/cis/${self:custom.profileRetrievalStage}/build/lambda_layer_arn}
